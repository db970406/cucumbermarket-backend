// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  socialLogin String?
  name        String
  username    String      @unique
  email       String      @unique
  password    String?
  location    String?
  introduce   String?
  avatar      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       Item[]
  itemPhotos  ItemPhoto[]
  likes       Like[]
  messages    Message[]
  rooms       Room[]
}

model Item {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemPhotos  ItemPhoto[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      Int
  likes       Like[]
}

model ItemPhoto {
  id        Int      @id @default(autoincrement())
  file      String   @unique
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    Int
  userId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  itemId    Int

  @@unique([userId, itemId])
}

model Message {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)
  userId    Int
  roomId    Int
}

model Room {
  id        Int       @id @default(autoincrement())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
